# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: python - ##REPO_NAME##

on:
   workflow_dispatch:
    inputs:
      repoName:
        description: Name of the repo
        required: false
      patch:
        description: 'Base64 encoded patch content'
        required: false
        default: ''
      command:
        description: 'Base64 encoded command content'
        required: false
        default: ''
      ref:
        description: 'The branch, tag, or commit SHA to checkout'
        required: false

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        os:
        - ubuntu-latest
        #- windows-latest
        python-version: ["3.12"]

    steps:
   
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
           repository: ${{ github.event.inputs.repoName }}
           ref: ${{ github.event.inputs.ref }}
    
    - name: Set up python version ${{ matrix.node-version }}
      uses: actions/setup-python@v5
      with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

    - name: Install dependencies
      shell: bash
      run: |
            if [[ -f "requirements.txt" ]]; then
                REQ_FILE="requirements.txt"
            elif [[ -f "requirements-dev.txt" ]]; then
                REQ_FILE="requirements-dev.txt"
            elif [[ -f "requirements_dev.txt" ]]; then
                REQ_FILE="requirements_dev.txt"
            elif [[ -f "requirements_test.txt" ]]; then
                REQ_FILE="requirements_test.txt"
            elif [[ -f "requirements-test.txt" ]]; then
                REQ_FILE="requirements-test.txt"
            else
                echo "No requirements file found."
            fi
            if [[ -n "$REQ_FILE" ]]
            then
                set +e
                echo "Running pip install..."
                output=$( ( python -m pip install --prefer-binary -r requirements.txt; exit ${PIPESTATUS[0]} ) 2>&1; exit ${PIPESTATUS[0]} )
                pipInstallExitCode=${PIPESTATUS[0]}

                set -e
                echo "${output}"
                if [[ $pipInstallExitCode != 0 ]]
                then
                    echo "${output} | Exit code: ${pipInstallExitCode}"
                    exit $pipInstallExitCode
                fi
            elif [ -e "setup.py" ]
            then
                set +e
                echo "Running python setup.py install..."
                output=$( ( python setup.py install --user; exit ${PIPESTATUS[0]} ) 2>&1; exit ${PIPESTATUS[0]} )
                pythonBuildExitCode=${PIPESTATUS[0]}

                set -e
                echo "${output}"
                if [[ $pythonBuildExitCode != 0 ]]
                then
                    echo "${output} | Exit code: ${pipInstallExitCode}"
                    exit $pythonBuildExitCode
                fi
            elif [ -e "pyproject.toml" ]
            then
                set +e
                echo "Running pip install poetry..."
                pip install poetry
                echo "Running poetry install..."
                output=$( ( poetry install --no-dev; exit ${PIPESTATUS[0]} ) 2>&1)
                pythonBuildExitCode=${PIPESTATUS[0]}

                set -e
                echo "${output}"
                if [[ $pythonBuildExitCode != 0 ]]
                then
                    echo "${output} | Exit code: ${pythonBuildExitCode}"
                    exit $pythonBuildExitCode
                fi
            else
                echo "Could not find setup.py or requirements.txt or pyproject.toml file"
            fi

    - name: Apply patch if provided, decode base64
      shell: bash
      run: |
          if [ -n "${{ github.event.inputs.patch }}" ]; then
            echo "Patch input provided. Applying patch..."
            echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
            echo "Decoded patch content:"
            cat patch.diff 
            echo "Apply the patch:"
            git apply --verbose patch.diff
          else
            echo "No patch input provided. Skipping patch application."
          fi
          echo "Print git diff on local repo"
          git diff
      
    - name: Build (ces)
      run: |
        if [ -f "package.json" ] && [ "$(node -e "const pkg = require('./package.json'); console.log(pkg.scripts && pkg.scripts.build ? 'true' : 'false');")" = "true" ]; then
          if [ -f yarn.lock ]; then
            yarn run build
          elif [ -f "package-lock.json" ]; then
            npm run build
          elif [ -f "pnpm-lock.yaml" ]; then
            pnpm run build
          else
            echo "Lock file not found. Cannot run build scripts."
            exit 1
          fi
        else
          echo "No build script found in package.json"
        fi
      working-directory: ${{ env.package_json_path }}

    - name: Run custom command
      shell: bash
      run: |
         if [ -n "${{ github.event.inputs.command }}" ]; then
           echo "Start running custom command"         
           echo "${{ github.event.inputs.command }}"
           output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
           echo "Decoded custom command is:"
           echo $output
           echo "!!==================================!!"
           echo "Command output:"
           echo "!!==================================!!"
           eval $output
           echo "!!==================================!!"
           echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
           echo "Finished running custom command!"
           echo "!!== RUN COMPLETED ==!!"
         fi
      
    - name: Run Test (ces)
      if: env.RAN_CUSTOM_COMMAND != 'true'
      shell: bash
      run: |
        pytest
        echo "!!== RUN COMPLETED ==!!"
