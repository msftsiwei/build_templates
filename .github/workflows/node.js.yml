# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        os:
        - ubuntu-latest
        - windows-latest
        node-version:
        #- 22
        - 20
        - 18
        - 16
        - 14
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        check-latest: true
      
    - name: Search for package.json
      id: search-package-json
      run: |
        # Search for package.json file in the repository
        PACKAGE_JSON_PATH=$(find . -name 'package.json' | head -n 1)
        if [ -z "$PACKAGE_JSON_PATH" ]; then
          echo "No package.json found"
          exit 1
        fi
        echo "package_json_path=$(dirname "$PACKAGE_JSON_PATH")" >> $GITHUB_ENV

      shell: bash
      
    - name: Check and Sync package-lock.json
      run: |
        if [ ! -f package-lock.json ]; then
          echo "package-lock.json not found, generating..."
          npm install --package-lock-only
        else
          echo "package-lock.json found, checking if in sync with package.json..."
          if ! npm ls > /dev/null 2>&1; then
            echo "package.json and package-lock.json are not in sync. Running 'npm install --package-lock-only' to synchronize..."
            npm install --package-lock-only
            if ! npm ls > /dev/null 2>&1; then
              echo "Failed to fully synchronize package-lock.json with package.json, but continuing..."
            fi
          else
            echo "package.json and package-lock.json are in sync."
          fi
        fi
      working-directory: ${{ env.package_json_path }}

    - name: Install dependencies with npm or pnpm
      run: |
        if [ -f package-lock.json ]; then
          npm ci
        elif [ -f pnpm-lock.yaml ]; then
          npm install -g pnpm
          pnpm install --frozen-lockfile
        else
          echo "No lock file found, job should be failed, but for project build and run test, add package-lock.json file."
          npm install --package-lock-only
          echo "Proceeding with dependency installation..."
          npm ci
        fi
      working-directory: ${{ env.package_json_path }}
      
    - name: Build
      run: |
        if [ -f package-lock.json ]; then
          npm run build --if-present
        elif [ -f pnpm-lock.yaml ]; then
          pnpm run build --if-present
        else
          echo "Lock file not found. Cannot run build scripts."
          exit 1
        fi
      working-directory: ${{ env.package_json_path }}
      
    - name: Test
      run: |
        if [ -f "package.json" ] && [ "$(node -e "const pkg = require('./package.json'); console.log(pkg.scripts && pkg.scripts.test ? true : false);")" = "true" ]; then
          echo "Test script found in package.json."
          cat "package.json"
          if [ -f "package-lock.json" ]; then
            npm test
          elif [ -f "pnpm-lock.yaml" ]; then
            pnpm test
          else
            echo "Lock file not found. Cannot run test scripts."
            exit 1
          fi
        else
          echo "No test script found in package.json."
          exit 0
        fi
      shell: bash
      working-directory: ${{ env.package_json_path }}

